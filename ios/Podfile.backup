# Simplified Podfile for reliable installation
require_relative '../node_modules/react-native/scripts/react_native_pods'

platform :ios, min_ios_version_supported
prepare_react_native_project!

# Firebase requires static frameworks
use_frameworks! :linkage => :static
$RNFirebaseAsStaticFramework = true

target 'TempGlicoTrack' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    
    # Fix deployment targets and LevelDB issues
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Ensure consistent deployment target for all pods (Firebase compatible)
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
        
        # Disable bitcode (deprecated in Xcode 14+)
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        
        # Basic React Native New Architecture support
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= []
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_NEW_ARCH_ENABLED=1'
      end
    end
    
    # Fix LevelDB port namespace compilation errors
    leveldb_version_set_h = installer.sandbox.root + 'leveldb-library/db/version_set.h'
    leveldb_version_set_cc = installer.sandbox.root + 'leveldb-library/db/version_set.cc'
    
    if leveldb_version_set_h.exist?
      content_h = leveldb_version_set_h.read
      unless content_h.include?('#include "port/port.h"')
        puts "ðŸ”§ Patching leveldb-library/db/version_set.h with port/port.h include"
        new_content_h = content_h.sub(
          /#include "db\/dbformat\.h"/,
          "#include \"db/dbformat.h\"\n#include \"port/port.h\""
        )
        leveldb_version_set_h.write(new_content_h)
      end
    end
    
    if leveldb_version_set_cc.exist?
      content_cc = leveldb_version_set_cc.read
      unless content_cc.include?('#include "port/port.h"')
        puts "ðŸ”§ Patching leveldb-library/db/version_set.cc with port/port.h include"
        new_content_cc = content_cc.sub(
          /#include "db\/version_set\.h"/,
          "#include \"db/version_set.h\"\n#include \"port/port.h\""
        )
        leveldb_version_set_cc.write(new_content_cc)
      end
    end
  end
end
