name: iOS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Permite executar manualmente

jobs:
  build-ios:
    name: Build iOS App (Clean Template)
    runs-on: macos-14 # macOS Sonoma com Xcode 16.2
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies
      run: |
        echo "=== Installing Node.js dependencies ==="
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps
        
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
      
    - name: Show Xcode and Environment Info
      run: |
        echo "=== Build Environment ==="
        xcodebuild -version
        echo "Node.js: $(node --version)"
        echo "npm: $(npm --version)"
        
    - name: Install CocoaPods Dependencies
      run: |
        cd ios
        echo "=== Installing CocoaPods dependencies ==="
        
        # Complete cleanup first
        rm -rf Pods Podfile.lock build
        rm -rf ~/Library/Developer/Xcode/DerivedData/GlicoTrack-* || true
        
        # Clean CocoaPods cache for problematic pods
        pod cache clean --all || true
        
        echo "CocoaPods version: $(pod --version)"
        echo "Ruby version: $(ruby --version)"
        echo "Xcode version: $(xcodebuild -version)"
        
        # Set environment variables for React Native flags
        export RCT_NEW_ARCH_ENABLED=1
        export USE_HERMES=1
        
        echo "Environment flags:"
        echo "RCT_NEW_ARCH_ENABLED=$RCT_NEW_ARCH_ENABLED"
        echo "USE_HERMES=$USE_HERMES"
        
        # Install pods with output management to prevent broken pipe
        echo "=== Starting pod install with enhanced configurations ==="
        
        # Method 1: Try with output to file to avoid broken pipe
        if ! pod install --repo-update > pod_install.log 2>&1; then
          echo "⚠️ Pod install failed, showing last 50 lines of log:"
          tail -50 pod_install.log || true
          echo "🔄 Retrying pod install..."
          pod install --repo-update
        else
          echo "✅ Pod install completed successfully"
          echo "📋 Showing last 20 lines of install log:"
          tail -20 pod_install.log || true
        fi
        
        echo "=== Installation verification ==="
        
        # Check if workspace was created
        if [ -f "GlicoTrack.xcworkspace/contents.xcworkspacedata" ]; then
          echo "✅ Workspace: GlicoTrack.xcworkspace created successfully"
        else
          echo "❌ Workspace: GlicoTrack.xcworkspace NOT found"
          ls -la *.xcworkspace 2>/dev/null || echo "No .xcworkspace files found"
        fi
        
        # Check if Podfile.lock was created
        if [ -f "Podfile.lock" ]; then
          echo "✅ Podfile.lock: Created successfully"
          echo "📋 Podfile.lock size: $(wc -l < Podfile.lock) lines"
        else
          echo "❌ Podfile.lock: NOT found"
        fi
        
        # Check if Pods directory exists and has content
        if [ -d "Pods" ]; then
          echo "✅ Pods directory: Exists with $(ls -1 Pods | wc -l) pods"
          echo "📦 Critical pods check:"
          ls -la Pods/ | grep -E "(RNSVG|RNPermissions|Firebase|leveldb)" || echo "⚠️ Some expected pods may be missing"
        else
          echo "❌ Pods directory: NOT found"
        fi
        
        # Final verification
        echo "=== Final Status Check ==="
        if [ -f "GlicoTrack.xcworkspace/contents.xcworkspacedata" ] && [ -f "Podfile.lock" ] && [ -d "Pods" ]; then
          echo "✅ CocoaPods installation appears successful"
        else
          echo "❌ CocoaPods installation may have failed"
          echo "🔍 Debugging info:"
          ls -la | head -10
          exit 1
        fi
      env:
        RCT_NEW_ARCH_ENABLED: 1
        USE_HERMES: 1
        
    - name: Debug leveldb-library Structure
      run: |
        cd ios
        echo "=== Debugging leveldb-library header structure ==="
        
        if [ -d "Pods/leveldb-library" ]; then
          echo "✅ leveldb-library pod found"
          echo "📁 Directory structure:"
          find Pods/leveldb-library -type d | head -20
          
          echo "🔍 Header files:"
          find Pods/leveldb-library -name "*.h" | head -20
          
          echo "🔍 Checking specific problematic headers:"
          if [ -f "Pods/leveldb-library/db/version_set.h" ]; then
            echo "✅ db/version_set.h exists"
          else
            echo "❌ db/version_set.h NOT found"
            echo "📋 Contents of db/ directory:"
            ls -la Pods/leveldb-library/db/ 2>/dev/null || echo "db/ directory not found"
          fi
          
          if [ -f "Pods/leveldb-library/db/version_edit.h" ]; then
            echo "✅ db/version_edit.h exists"
          else
            echo "❌ db/version_edit.h NOT found"
          fi
        else
          echo "❌ leveldb-library pod not found"
          echo "📋 Available pods:"
          ls -la Pods/ | head -10
        fi
        
    - name: Build iOS App (Debug)
      run: |
        cd ios
        echo "=== Building iOS App for Simulator ==="
        
        # Build with proper error handling and leveldb fixes
        echo "🔨 Starting iOS build process..."
        
        # Build to log file to avoid broken pipe, then show relevant output
        if ! xcodebuild \
          -workspace GlicoTrack.xcworkspace \
          -scheme GlicoTrack \
          -configuration Debug \
          -sdk iphonesimulator \
          -derivedDataPath build \
          -allowProvisioningUpdates \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          DEVELOPMENT_TEAM="" \
          ONLY_ACTIVE_ARCH=NO \
          CLANG_CXX_LANGUAGE_STANDARD=c++17 \
          CLANG_CXX_LIBRARY=libc++ \
          clean build > build.log 2>&1; then
          
          echo "❌ Build failed, showing error details:"
          echo "=== Last 100 lines of build log ==="
          tail -100 build.log
          echo "=== Error summary ==="
          grep -i "error:" build.log | tail -10 || echo "No specific errors found in log"
          exit 1
        else
          echo "✅ Build completed successfully!"
          echo "📋 Build summary from log:"
          grep -E "(BUILD SUCCEEDED|warning:|note:)" build.log | tail -20 || echo "No build summary available"
        fi
          
    - name: Build iOS App for Device (Release - Optional)
      if: github.ref == 'refs/heads/main'
      run: |
        cd ios
        # Skip release build for now - requires Apple Developer account setup
        echo "=== Release Build Skipped ==="
        echo "To enable release builds, configure APPLE_TEAM_ID secret and uncomment below:"
        echo "# xcodebuild \\"
        echo "#   -workspace GlicoTrack.xcworkspace \\"
        echo "#   -scheme GlicoTrack \\"  
        echo "#   -configuration Release \\"
        echo "#   -destination 'generic/platform=iOS' \\"
        echo "#   -derivedDataPath build \\"
        echo "#   -allowProvisioningUpdates \\"
        echo "#   DEVELOPMENT_TEAM=\"\${{ secrets.APPLE_TEAM_ID }}\" \\"
        echo "#   CODE_SIGN_IDENTITY=\"iPhone Developer\" \\"
        echo "#   clean archive \\"
        echo "#   -archivePath build/GlicoTrack.xcarchive"
          
    - name: Export IPA (Release - Optional)
      if: github.ref == 'refs/heads/main'
      run: |
        cd ios
        echo "=== IPA Export Skipped ==="
        echo "IPA export requires release archive which is currently disabled"
          
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-artifacts
        path: |
          ios/build/Build/Products/Debug-iphonesimulator/TempGlicoTrack.app
        retention-days: 7
        
    - name: Upload Build Logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          ios/build/Logs
          ~/Library/Developer/Xcode/DerivedData/**/Logs
        retention-days: 3
        
    - name: Build Summary
      if: always()
      run: |
        echo "## 📱 iOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Xcode Version:** $(xcodebuild -version | head -n 1)" >> $GITHUB_STEP_SUMMARY
        echo "- **React Native:** 0.80.2" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Configuration:** Debug (Simulator)" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "- **Release Build:** ✅ Attempted" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Release Build:** ⏭️ Skipped (not main branch)" >> $GITHUB_STEP_SUMMARY
        fi