name: iOS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    name: Build iOS App
    runs-on: macos-14

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm install --legacy-peer-deps # Handle peer dependency conflicts in React Native projects

    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Show Xcode and Environment Info
      run: |
        echo "=== Build Environment ==="
        xcodebuild -version
        echo "Node.js: $(node --version)"
        echo "npm: $(npm --version)"

    - name: Cleanup Ruby Gems Cache
      run: gem cleanup

    - name: Ensure Latest CocoaPods
      run: sudo gem install cocoapods -v 1.16.2

    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: Install CocoaPods Dependencies
      run: |
        cd ios
        echo "=== Installing CocoaPods dependencies ==="
        # Com o cache, a instalação fica muito mais rápida.
        # A limpeza completa de DerivedData ainda é uma boa prática.
        rm -rf ~/Library/Developer/Xcode/DerivedData/GlicoTrack-* || true
        
        echo "CocoaPods version: $(pod --version)"
        
        # Instala os pods com logs mais verbosos e sem atualização de repositório para melhor estabilidade
        echo "Ruby version: $(ruby --version)"
        echo "RubyGems version: $(gem --version)"
        pod install --verbose --no-repo-update
      env:
        RCT_NEW_ARCH_ENABLED: 1
        USE_HERMES: 1
        
    - name: Verify Pods Installation
      run: |
        cd ios
        echo "=== Verifying CocoaPods Installation ==="
        if [ ! -d "Pods/leveldb-library" ]; then
          echo "❌ Critical pod 'leveldb-library' is missing!"
          echo "Listing available pods:"
          ls -l Pods
          exit 1
        else
          echo "✅ Critical pod 'leveldb-library' found."
          echo "🔍 Checking leveldb headers:"
          if [ -f "Pods/leveldb-library/db/version_set.h" ]; then
            echo "  ✅ db/version_set.h exists"
          else
            echo "  ❌ db/version_set.h missing"
          fi
          if [ -f "Pods/leveldb-library/db/dbformat.h" ]; then
            echo "  ✅ db/dbformat.h exists" 
          else
            echo "  ❌ db/dbformat.h missing"
          fi
        fi

    - name: Build iOS App (Debug)
      run: |
        cd ios
        echo "=== Building iOS App for Simulator ==="
        
        # O build é direcionado para um arquivo de log para melhor depuração em caso de falha
        if ! xcodebuild \
          -workspace GlicoTrack.xcworkspace \
          -scheme GlicoTrack \
          -configuration Debug \
          -sdk iphonesimulator \
          -derivedDataPath build \
          CODE_SIGNING_ALLOWED=NO \
          clean build > build.log 2>&1; then
          
          echo "❌ Build failed. Displaying last 100 lines of the build log:"
          tail -100 build.log
          exit 1
        else
          echo "✅ Build completed successfully!"
        fi

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ios-debug-build
        path: ios/build/Build/Products/Debug-iphonesimulator/TempGlicoTrack.app
        retention-days: 7

    - name: Upload Build Logs on Failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ios-build-logs
        path: ios/build.log
        retention-days: 7

    - name: Build Summary
      if: always()
      run: |
        echo "## 📱 iOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        XCODE_VERSION=$(xcodebuild -version | head -n 1)
        echo "- **Xcode Version:** $XCODE_VERSION" >> $GITHUB_STEP_SUMMARY