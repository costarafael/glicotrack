name: iOS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Permite executar manualmente

jobs:
  build-ios:
    name: Build iOS App (Clean Template)
    runs-on: macos-14 # macOS Sonoma com Xcode 16.2
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies
      run: |
        echo "=== Installing Node.js dependencies ==="
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps
        
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
      
    - name: Show Xcode and Environment Info
      run: |
        echo "=== Build Environment ==="
        xcodebuild -version
        echo "Node.js: $(node --version)"
        echo "npm: $(npm --version)"
        
    - name: Install CocoaPods Dependencies
      run: |
        cd ios
        echo "=== Installing CocoaPods dependencies ==="
        
        # Complete cleanup first
        rm -rf Pods Podfile.lock build
        rm -rf ~/Library/Developer/Xcode/DerivedData/GlicoTrack-* || true
        
        # Clean CocoaPods cache for problematic pods
        pod cache clean --all || true
        
        echo "CocoaPods version: $(pod --version)"
        echo "Ruby version: $(ruby --version)"
        echo "Xcode version: $(xcodebuild -version)"
        
        # Set environment variables for React Native flags
        export RCT_NEW_ARCH_ENABLED=1
        export USE_HERMES=1
        
        echo "Environment flags:"
        echo "RCT_NEW_ARCH_ENABLED=$RCT_NEW_ARCH_ENABLED"
        echo "USE_HERMES=$USE_HERMES"
        
        # Enhanced CocoaPods installation with comprehensive error handling
        echo "=== Starting robust pod install process ==="
        
        # Step 1: Update CocoaPods repo first
        echo "üîÑ Updating CocoaPods repository..."
        pod repo update --verbose || echo "‚ö†Ô∏è Repo update had issues but continuing..."
        
        # Step 2: Attempt installation with detailed logging
        echo "üì¶ Installing pods with comprehensive logging..."
        
        # Try installation with multiple fallback strategies
        INSTALL_SUCCESS=false
        
        # Strategy 1: Standard install
        echo "üéØ Strategy 1: Standard install with repo update"
        if pod install --repo-update --verbose > pod_install_full.log 2>&1; then
          INSTALL_SUCCESS=true
          echo "‚úÖ Standard install succeeded!"
        else
          echo "‚ùå Standard install failed, trying alternatives..."
          echo "üìã Last 30 lines of failed install:"
          tail -30 pod_install_full.log
        fi
        
        # Strategy 2: Clean install if first failed
        if [ "$INSTALL_SUCCESS" = false ]; then
          echo "üéØ Strategy 2: Clean install after cache clear"
          pod cache clean --all
          rm -rf Pods Podfile.lock
          
          if pod install --repo-update --verbose > pod_install_clean.log 2>&1; then
            INSTALL_SUCCESS=true
            echo "‚úÖ Clean install succeeded!"
          else
            echo "‚ùå Clean install also failed"
            echo "üìã Last 30 lines of clean install:"
            tail -30 pod_install_clean.log
          fi
        fi
        
        # Strategy 3: Install without repo update as last resort
        if [ "$INSTALL_SUCCESS" = false ]; then
          echo "üéØ Strategy 3: Install without repo update"
          if pod install --verbose > pod_install_no_update.log 2>&1; then
            INSTALL_SUCCESS=true
            echo "‚úÖ Install without update succeeded!"
          else
            echo "‚ùå All installation strategies failed!"
            echo "üìã Final attempt log:"
            tail -50 pod_install_no_update.log
          fi
        fi
        
        # Verify installation success
        if [ "$INSTALL_SUCCESS" = false ]; then
          echo "üí• CRITICAL: All CocoaPods installation strategies failed!"
          echo "üîç Debugging pod environment:"
          pod --version
          ruby --version
          gem list | grep cocoapods
          exit 1
        fi
        
        echo "=== Installation verification ==="
        
        # Check if workspace was created
        if [ -f "GlicoTrack.xcworkspace/contents.xcworkspacedata" ]; then
          echo "‚úÖ Workspace: GlicoTrack.xcworkspace created successfully"
        else
          echo "‚ùå Workspace: GlicoTrack.xcworkspace NOT found"
          ls -la *.xcworkspace 2>/dev/null || echo "No .xcworkspace files found"
        fi
        
        # Check if Podfile.lock was created
        if [ -f "Podfile.lock" ]; then
          echo "‚úÖ Podfile.lock: Created successfully"
          echo "üìã Podfile.lock size: $(wc -l < Podfile.lock) lines"
        else
          echo "‚ùå Podfile.lock: NOT found"
        fi
        
        # Check if Pods directory exists and has content
        if [ -d "Pods" ]; then
          echo "‚úÖ Pods directory: Exists with $(ls -1 Pods | wc -l) pods"
          echo "üì¶ Critical pods verification:"
          
          # Check each critical pod individually
          for pod in "RNSVG" "RNPermissions" "Firebase" "leveldb-library"; do
            if [ -d "Pods/$pod" ]; then
              echo "  ‚úÖ $pod: Found"
            else
              echo "  ‚ùå $pod: MISSING"
            fi
          done
          
          # Specific leveldb verification
          if [ -d "Pods/leveldb-library" ]; then
            echo "üîç leveldb-library detailed check:"
            echo "  üìÅ Directory size: $(du -sh Pods/leveldb-library 2>/dev/null || echo 'Unknown')"
            echo "  üìÑ Header files count: $(find Pods/leveldb-library -name "*.h" | wc -l)"
            
            # Check critical headers
            for header in "db/version_set.h" "db/version_edit.h"; do
              if [ -f "Pods/leveldb-library/$header" ]; then
                echo "  ‚úÖ $header: Found"
              else
                echo "  ‚ùå $header: MISSING"
              fi
            done
          else
            echo "üí• CRITICAL: leveldb-library pod is completely missing!"
          fi
        else
          echo "‚ùå Pods directory: NOT found"
        fi
        
        # Final verification with leveldb focus
        echo "=== Final Status Check ==="
        VERIFICATION_FAILED=false
        
        if [ ! -f "GlicoTrack.xcworkspace/contents.xcworkspacedata" ]; then
          echo "‚ùå Workspace not created"
          VERIFICATION_FAILED=true
        fi
        
        if [ ! -f "Podfile.lock" ]; then
          echo "‚ùå Podfile.lock not created"
          VERIFICATION_FAILED=true
        fi
        
        if [ ! -d "Pods/leveldb-library" ]; then
          echo "‚ùå leveldb-library pod missing"
          VERIFICATION_FAILED=true
        fi
        
        if [ ! -f "Pods/leveldb-library/db/version_set.h" ]; then
          echo "‚ùå Critical leveldb header missing: db/version_set.h"
          VERIFICATION_FAILED=true
        fi
        
        if [ "$VERIFICATION_FAILED" = true ]; then
          echo "üí• CRITICAL: CocoaPods installation verification failed!"
          echo "üîç Debug information:"
          echo "üìã Podfile content:"
          cat Podfile | head -20
          echo "üìã Available pods:"
          ls -la Pods/ 2>/dev/null | head -10
          echo "üìã Podfile.lock snippet:"
          head -20 Podfile.lock 2>/dev/null || echo "Podfile.lock not found"
          exit 1
        else
          echo "‚úÖ All verifications passed - CocoaPods installation successful!"
        fi
      env:
        RCT_NEW_ARCH_ENABLED: 1
        USE_HERMES: 1
        
    - name: Build iOS App (Debug)
      run: |
        cd ios
        echo "=== Building iOS App for Simulator ==="
        
        # Build with proper error handling and leveldb fixes
        echo "üî® Starting iOS build process..."
        
        # Build to log file to avoid broken pipe, then show relevant output
        if ! xcodebuild \
          -workspace GlicoTrack.xcworkspace \
          -scheme GlicoTrack \
          -configuration Debug \
          -sdk iphonesimulator \
          -derivedDataPath build \
          -allowProvisioningUpdates \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          DEVELOPMENT_TEAM="" \
          ONLY_ACTIVE_ARCH=NO \
          CLANG_CXX_LANGUAGE_STANDARD=c++17 \
          CLANG_CXX_LIBRARY=libc++ \
          clean build > build.log 2>&1; then
          
          echo "‚ùå Build failed, showing error details:"
          echo "=== Last 100 lines of build log ==="
          tail -100 build.log
          echo "=== Error summary ==="
          grep -i "error:" build.log | tail -10 || echo "No specific errors found in log"
          exit 1
        else
          echo "‚úÖ Build completed successfully!"
          echo "üìã Build summary from log:"
          grep -E "(BUILD SUCCEEDED|warning:|note:)" build.log | tail -20 || echo "No build summary available"
        fi
          
    - name: Build iOS App for Device (Release - Optional)
      if: github.ref == 'refs/heads/main'
      run: |
        cd ios
        # Skip release build for now - requires Apple Developer account setup
        echo "=== Release Build Skipped ==="
        echo "To enable release builds, configure APPLE_TEAM_ID secret and uncomment below:"
        echo "# xcodebuild \\"
        echo "#   -workspace GlicoTrack.xcworkspace \\"
        echo "#   -scheme GlicoTrack \\"  
        echo "#   -configuration Release \\"
        echo "#   -destination 'generic/platform=iOS' \\"
        echo "#   -derivedDataPath build \\"
        echo "#   -allowProvisioningUpdates \\"
        echo "#   DEVELOPMENT_TEAM=\"\${{ secrets.APPLE_TEAM_ID }}\" \\"
        echo "#   CODE_SIGN_IDENTITY=\"iPhone Developer\" \\"
        echo "#   clean archive \\"
        echo "#   -archivePath build/GlicoTrack.xcarchive"
          
    - name: Export IPA (Release - Optional)
      if: github.ref == 'refs/heads/main'
      run: |
        cd ios
        echo "=== IPA Export Skipped ==="
        echo "IPA export requires release archive which is currently disabled"
          
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-artifacts
        path: |
          ios/build/Build/Products/Debug-iphonesimulator/TempGlicoTrack.app
        retention-days: 7
        
    - name: Upload Build Logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          ios/build/Logs
          ~/Library/Developer/Xcode/DerivedData/**/Logs
        retention-days: 3
        
    - name: Build Summary
      if: always()
      run: |
        echo "## üì± iOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Xcode Version:** $(xcodebuild -version | head -n 1)" >> $GITHUB_STEP_SUMMARY
        echo "- **React Native:** 0.80.2" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Configuration:** Debug (Simulator)" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "- **Release Build:** ‚úÖ Attempted" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Release Build:** ‚è≠Ô∏è Skipped (not main branch)" >> $GITHUB_STEP_SUMMARY
        fi